{"ast":null,"code":"import { apiConfig } from \"./constants\";\nclass Api {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n    this._authorization = config.headers['authorization'];\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(res => this._checkResponse(res));\n  }\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(res => this._checkResponse(res));\n  }\n  editProfile(data) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.bio\n      })\n    }).then(res => this._checkResponse(res));\n  }\n  addNewCard(data) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(res => this._checkResponse(res));\n  }\n  setUserAvatar(data) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.link\n      })\n    }).then(res => this._checkResponse(res));\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n  putCardLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n  deleteCardLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n}\nconst api = new Api(apiConfig);","map":{"version":3,"names":["apiConfig","Api","constructor","config","_url","url","_headers","headers","_authorization","_checkResponse","res","ok","json","Promise","reject","status","getInfo","fetch","authorization","then","getInitialCards","editProfile","data","method","body","JSON","stringify","name","about","bio","addNewCard","link","setUserAvatar","avatar","deleteCard","cardId","putCardLike","deleteCardLike","api"],"sources":["/Users/arinaravilova/Desktop/slay/mesto-react/mesto-react/src/utils/Api.js"],"sourcesContent":["import { apiConfig } from \"./constants\";\n\nclass Api {\n    constructor(config) {\n        this._url = config.url;\n        this._headers = config.headers;\n        this._authorization = config.headers['authorization'];\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json()\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    getInfo() {\n        return fetch(`${this._url}/users/me`, {\n            headers: {\n                authorization: this._authorization\n            }\n        })\n            .then((res) => this._checkResponse(res))\n    }\n\n    getInitialCards() {\n        return fetch(`${this._url}/cards`, {\n            headers: {\n                authorization: this._authorization\n            }\n        })\n            .then((res) => this._checkResponse(res))\n    }\n\n    editProfile(data) {\n        return fetch(`${this._url}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                about: data.bio\n            })\n        })\n            .then((res) => this._checkResponse(res))\n    }\n\n    addNewCard(data) {\n        return fetch(`${this._url}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            })\n        })\n            .then((res) => this._checkResponse(res))\n    }\n\n    setUserAvatar(data) {\n        return fetch(`${this._url}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: data.link,\n            })\n        })\n            .then((res) => this._checkResponse(res))\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._url}/cards/${cardId}`,{\n            method: 'DELETE',\n            headers: this._headers,\n        })\n        .then((res) => this._checkResponse(res))\n    }\n\n    putCardLike(cardId){\n        return fetch(`${this._url}/cards/${cardId}/likes`,{\n            method: 'PUT',\n            headers: this._headers,\n        })\n        .then((res) => this._checkResponse(res))\n    }\n\n    deleteCardLike(cardId){\n        return fetch(`${this._url}/cards/${cardId}/likes`,{\n            method: 'DELETE',\n            headers: this._headers,\n        })\n        .then((res) => this._checkResponse(res))\n    }\n}\n\nconst api = new Api(apiConfig)\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AAEvC,MAAMC,GAAG,CAAC;EACNC,WAAWA,CAACC,MAAM,EAAE;IAChB,IAAI,CAACC,IAAI,GAAGD,MAAM,CAACE,GAAG;IACtB,IAAI,CAACC,QAAQ,GAAGH,MAAM,CAACI,OAAO;IAC9B,IAAI,CAACC,cAAc,GAAGL,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC;EACzD;EAEAE,cAAcA,CAACC,GAAG,EAAE;IAChB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACR,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACrB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAClD;EAEAC,OAAOA,CAAA,EAAG;IACN,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACb,IAAK,WAAU,EAAE;MAClCG,OAAO,EAAE;QACLW,aAAa,EAAE,IAAI,CAACV;MACxB;IACJ,CAAC,CAAC,CACGW,IAAI,CAAET,GAAG,IAAK,IAAI,CAACD,cAAc,CAACC,GAAG,CAAC,CAAC;EAChD;EAEAU,eAAeA,CAAA,EAAG;IACd,OAAOH,KAAK,CAAE,GAAE,IAAI,CAACb,IAAK,QAAO,EAAE;MAC/BG,OAAO,EAAE;QACLW,aAAa,EAAE,IAAI,CAACV;MACxB;IACJ,CAAC,CAAC,CACGW,IAAI,CAAET,GAAG,IAAK,IAAI,CAACD,cAAc,CAACC,GAAG,CAAC,CAAC;EAChD;EAEAW,WAAWA,CAACC,IAAI,EAAE;IACd,OAAOL,KAAK,CAAE,GAAE,IAAI,CAACb,IAAK,WAAU,EAAE;MAClCmB,MAAM,EAAE,OAAO;MACfhB,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBkB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,IAAI,EAAEL,IAAI,CAACK,IAAI;QACfC,KAAK,EAAEN,IAAI,CAACO;MAChB,CAAC;IACL,CAAC,CAAC,CACGV,IAAI,CAAET,GAAG,IAAK,IAAI,CAACD,cAAc,CAACC,GAAG,CAAC,CAAC;EAChD;EAEAoB,UAAUA,CAACR,IAAI,EAAE;IACb,OAAOL,KAAK,CAAE,GAAE,IAAI,CAACb,IAAK,QAAO,EAAE;MAC/BmB,MAAM,EAAE,MAAM;MACdhB,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBkB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,IAAI,EAAEL,IAAI,CAACK,IAAI;QACfI,IAAI,EAAET,IAAI,CAACS;MACf,CAAC;IACL,CAAC,CAAC,CACGZ,IAAI,CAAET,GAAG,IAAK,IAAI,CAACD,cAAc,CAACC,GAAG,CAAC,CAAC;EAChD;EAEAsB,aAAaA,CAACV,IAAI,EAAE;IAChB,OAAOL,KAAK,CAAE,GAAE,IAAI,CAACb,IAAK,kBAAiB,EAAE;MACzCmB,MAAM,EAAE,OAAO;MACfhB,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBkB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBO,MAAM,EAAEX,IAAI,CAACS;MACjB,CAAC;IACL,CAAC,CAAC,CACGZ,IAAI,CAAET,GAAG,IAAK,IAAI,CAACD,cAAc,CAACC,GAAG,CAAC,CAAC;EAChD;EAEAwB,UAAUA,CAACC,MAAM,EAAE;IACf,OAAOlB,KAAK,CAAE,GAAE,IAAI,CAACb,IAAK,UAAS+B,MAAO,EAAC,EAAC;MACxCZ,MAAM,EAAE,QAAQ;MAChBhB,OAAO,EAAE,IAAI,CAACD;IAClB,CAAC,CAAC,CACDa,IAAI,CAAET,GAAG,IAAK,IAAI,CAACD,cAAc,CAACC,GAAG,CAAC,CAAC;EAC5C;EAEA0B,WAAWA,CAACD,MAAM,EAAC;IACf,OAAOlB,KAAK,CAAE,GAAE,IAAI,CAACb,IAAK,UAAS+B,MAAO,QAAO,EAAC;MAC9CZ,MAAM,EAAE,KAAK;MACbhB,OAAO,EAAE,IAAI,CAACD;IAClB,CAAC,CAAC,CACDa,IAAI,CAAET,GAAG,IAAK,IAAI,CAACD,cAAc,CAACC,GAAG,CAAC,CAAC;EAC5C;EAEA2B,cAAcA,CAACF,MAAM,EAAC;IAClB,OAAOlB,KAAK,CAAE,GAAE,IAAI,CAACb,IAAK,UAAS+B,MAAO,QAAO,EAAC;MAC9CZ,MAAM,EAAE,QAAQ;MAChBhB,OAAO,EAAE,IAAI,CAACD;IAClB,CAAC,CAAC,CACDa,IAAI,CAAET,GAAG,IAAK,IAAI,CAACD,cAAc,CAACC,GAAG,CAAC,CAAC;EAC5C;AACJ;AAEA,MAAM4B,GAAG,GAAG,IAAIrC,GAAG,CAACD,SAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}